{
	"info": {
		"_postman_id": "9abe25aa-8b96-44d7-b3a5-da7e1a8bdcef",
		"name": "Carna API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CREATE Tests",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "Create Good User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    // 201: Created\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"tester\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								},
								"description": "Creates a basic user following the Django Username Guidelines."
							},
							"response": []
						},
						{
							"name": "Create Bad User Namespace",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"tester jones\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								},
								"description": "Check User Naming Requirements\r\n- Cannot contain spaces"
							},
							"response": []
						},
						{
							"name": "Create Bad User Name ASCII",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"tester jones\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								},
								"description": "Check User Naming Requirements\r\n- Name is not alphanumeric or containing @.+-"
							},
							"response": []
						},
						{
							"name": "Create Bad User Length",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"ineedsomeusernamesthatexceedacharacterlengthsoiputitallinherewithnospaces.ifyougotthisfarandamstillreadingcongratsthisisatestcaseforconfirmingoverflow.\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/users/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"users",
										""
									]
								},
								"description": "Check User Naming Requirements\r\n- Name cannot be over 151 characters."
							},
							"response": []
						},
						{
							"name": "Login Good User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"tester\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/token-auth/",
									"host": [
										"{{host}}"
									],
									"path": [
										"token-auth",
										""
									]
								},
								"description": "User found in database."
							},
							"response": []
						},
						{
							"name": "Login No User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"fakeaccount1234\",\r\n    \"password\": \"test\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/token-auth/",
									"host": [
										"{{host}}"
									],
									"path": [
										"token-auth",
										""
									]
								},
								"description": "User not found in database."
							},
							"response": []
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "Add new course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    // 201: Created\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"A Test\",\r\n    \"release_date\": \"2021-05-14\",\r\n    \"stars\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{host}}/api/courses/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"courses",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "READ Tests",
			"item": [
				{
					"name": "User",
					"item": [
						{
							"name": "View current user (Logged in)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "test",
											"type": "string"
										},
										{
											"key": "username",
											"value": "tester",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/current_user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"current_user",
										""
									]
								},
								"description": "Pass login credentials to view user information.\r\nPrereq: username=tester and password=test exists inside the database."
							},
							"response": []
						},
						{
							"name": "View current user (Not logged in)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    // Check 401: Unauthorized\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/current_user/",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"current_user",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Course",
					"item": [
						{
							"name": "View all Courses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/courses",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"courses"
									]
								},
								"description": "Get a list of all courses."
							},
							"response": []
						},
						{
							"name": "View Course Exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/courses/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"courses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "4"
										}
									]
								},
								"description": "View data about a single course."
							},
							"response": []
						},
						{
							"name": "View Unknown Course",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status test\", function () {\r",
											"    // Check 404: Not Found\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{host}}/api/courses/:id",
									"host": [
										"{{host}}"
									],
									"path": [
										"api",
										"courses",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "1001"
										}
									]
								},
								"description": "View data about a single course."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "UPDATE Tests",
			"item": [
				{
					"name": "User edit owned course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "adminpass",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"abcdef-why\",\r\n    \"release_date\": \"2021-05-14\",\r\n    \"stars\": 5,\r\n    \"topic\":\"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/:id/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "Logged in User edits their course information.\r\nPrereq: A course with ID = 1 must exist."
					},
					"response": []
				},
				{
					"name": "User edit unknown course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    // Check 404: Not Found\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "adminpass",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"editcourse\",\r\n    \"release_date\": \"2021-05-12\",\r\n    \"stars\": 1,\r\n    \"topic\":\"test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/api/courses/:id/",
							"host": [
								"{{host}}"
							],
							"path": [
								"api",
								"courses",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "1001"
								}
							]
						},
						"description": "User tries to edit unknown course"
					},
					"response": []
				}
			]
		},
		{
			"name": "DELETE Tests",
			"item": [
				{
					"name": "Remove a owned course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    // Check 204: No Content\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "adminpass",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/courses/:id/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"courses",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "3"
								}
							]
						},
						"description": "Delete a course from course list. Prereq: Course ID exists."
					},
					"response": []
				},
				{
					"name": "Remove unknown course",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8000/api/courses/:id/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8000",
							"path": [
								"api",
								"courses",
								":id",
								""
							],
							"variable": [
								{
									"key": "id",
									"value": "15"
								}
							]
						},
						"description": "Cannot delete a course from course list. \r\nPrereq: Course ID doesn't exists."
					},
					"response": []
				}
			]
		}
	]
}